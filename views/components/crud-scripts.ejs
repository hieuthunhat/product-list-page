<!-- CRUD JavaScript Functions -->
<script>
    document.getElementById('addProductForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const productData = {
            name: formData.get('name').trim(),
            price: parseFloat(formData.get('price')),
            product: formData.get('product'),
            description: formData.get('description') ? formData.get('description').trim() : '',
            color: formData.get('color') || '',
            image: formData.get('image') || ''
        };

        if (!productData.name || !productData.price || !productData.product) {
            showNotification('Please fill in all required fields (Name, Price, Category)', 'error');
            return;
        }

        console.log('Sending data:', productData);

        try {
            const response = await fetch('/api/products', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(productData)
            });

            const result = await response.json();
            console.log('Response:', result);

            if (response.ok) {
                bootstrap.Modal.getInstance(document.getElementById('addProductModal')).hide();
                showNotification('Product added successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                const errorMsg = result.message || (result.errors ? result.errors.join(', ') : 'Error adding product');
                console.error('Server error:', result);
                showNotification(errorMsg, 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            showNotification('Error: ' + error.message, 'error');
        }
    });

    async function editProduct(id) {
        try {
            const response = await fetch(`/api/products/${id}`);
            const product = await response.json();
            
            console.log('Product data:', product); 
            
            document.getElementById('editProductId').value = product.data.id;
            document.getElementById('editProductIdDisplay').textContent = product.data.id;
            document.getElementById('editProductName').value = product.data.name;
            document.getElementById('editProductPrice').value = product.data.price;
            document.getElementById('editProductDescription').value = product.data.description || '';
            document.getElementById('editProductCategory').value = product.data.product || '';
            document.getElementById('editProductColor').value = product.data.color || '';
            document.getElementById('editProductImage').value = product.data.image || '';
            
            new bootstrap.Modal(document.getElementById('editProductModal')).show();
        } catch (error) {
            console.error('Error fetching product:', error);
            showNotification('Error fetching product: ' + error.message, 'error');
        }
    }

    document.getElementById('editProductForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const productData = {
            name: formData.get('name').trim(),
            price: parseFloat(formData.get('price')),
            product: formData.get('product'),
            description: formData.get('description') ? formData.get('description').trim() : '',
            color: formData.get('color') || '',
            image: formData.get('image') || ''
        };
        const id = formData.get('id');


        if (!productData.name || !productData.price || !productData.product) {
            showNotification('Please fill in all required fields (Name, Price, Category)', 'error');
            return;
        }

        console.log('Updating product:', id, productData);

        try {
            const response = await fetch(`/api/products/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(productData)
            });

            const result = await response.json();
            console.log('Update response:', result);

            if (response.ok) {
                bootstrap.Modal.getInstance(document.getElementById('editProductModal')).hide();
                showNotification('Product updated successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                const errorMsg = result.message || (result.errors ? result.errors.join(', ') : 'Error updating product');
                console.error('Server error:', result);
                showNotification(errorMsg, 'error');
            }
        } catch (error) {
            console.error('Error updating:', error);
            showNotification('Error: ' + error.message, 'error');
        }
    });

    // Delete Product Function
    async function deleteProduct(id) {
        if (confirm('Are you sure you want to delete this product?')) {
            try {
                const response = await fetch(`/api/products/${id}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showNotification('Product deleted successfully!', 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showNotification('Error deleting product', 'error');
                }
            } catch (error) {
                showNotification('Error: ' + error.message, 'error');
            }
        }
    }

    // Notification function
    function showNotification(message, type) {
        const toastContainer = document.getElementById('toastContainer') || createToastContainer();
        const toastId = 'toast-' + Date.now();
        
        const toastHtml = `
            <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0" 
                 role="alert" aria-live="assertive" aria-atomic="true" id="${toastId}">
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-triangle'}"></i>
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" 
                            data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        `;
        
        toastContainer.insertAdjacentHTML('beforeend', toastHtml);
        const toastElement = document.getElementById(toastId);
        const toast = new bootstrap.Toast(toastElement);
        toast.show();
        
        // Remove toast after it's hidden
        toastElement.addEventListener('hidden.bs.toast', () => {
            toastElement.remove();
        });
    }

    function createToastContainer() {
        const container = document.createElement('div');
        container.id = 'toastContainer';
        container.className = 'toast-container position-fixed top-0 end-0 p-3';
        container.style.zIndex = '9999';
        document.body.appendChild(container);
        return container;
    }

    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth'
                });
            }
        });
    });

    // Reset forms when modals are closed
    document.getElementById('addProductModal').addEventListener('hidden.bs.modal', function () {
        document.getElementById('addProductForm').reset();
    });

    document.getElementById('editProductModal').addEventListener('hidden.bs.modal', function () {
        document.getElementById('editProductForm').reset();
    });
</script>
