<!-- CRUD JavaScript Functions -->
<script>
    // Global variables for sort
    let currentSort = '';

    document.getElementById('addProductForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const productData = {
            name: formData.get('name').trim(),
            price: parseFloat(formData.get('price')),
            product: formData.get('product'),
            description: formData.get('description') ? formData.get('description').trim() : '',
            color: formData.get('color') || '',
            image: formData.get('image') || ''
        };

        if (!productData.name || !productData.price || !productData.product) {
            showNotification('Please fill in all required fields (Name, Price, Category)', 'error');
            return;
        }

        console.log('Sending data:', productData);

        try {
            const response = await fetch('/api/products', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(productData)
            });

            const result = await response.json();
            console.log('Response:', result);

            if (response.ok) {
                bootstrap.Modal.getInstance(document.getElementById('addProductModal')).hide();
                showNotification('Product added successfully!', 'success');
                setTimeout(() => loadProducts(currentSort), 1000);
            } else {
                const errorMsg = result.message || (result.errors ? result.errors.join(', ') : 'Error adding product');
                console.error('Server error:', result);
                showNotification(errorMsg, 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            showNotification('Error: ' + error.message, 'error');
        }
    });

    async function editProduct(id) {
        try {
            const response = await fetch(`/api/products/${id}`);
            const product = await response.json();
            
            console.log('Product data:', product); 
            
            document.getElementById('editProductId').value = product.data.id;
            document.getElementById('editProductIdDisplay').textContent = product.data.id;
            document.getElementById('editProductName').value = product.data.name;
            document.getElementById('editProductPrice').value = product.data.price;
            document.getElementById('editProductDescription').value = product.data.description || '';
            document.getElementById('editProductCategory').value = product.data.product || '';
            document.getElementById('editProductColor').value = product.data.color || '';
            document.getElementById('editProductImage').value = product.data.image || '';
            
            new bootstrap.Modal(document.getElementById('editProductModal')).show();
        } catch (error) {
            console.error('Error fetching product:', error);
            showNotification('Error fetching product: ' + error.message, 'error');
        }
    }

    document.getElementById('editProductForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const productData = {
            name: formData.get('name').trim(),
            price: parseFloat(formData.get('price')),
            product: formData.get('product'),
            description: formData.get('description') ? formData.get('description').trim() : '',
            color: formData.get('color') || '',
            image: formData.get('image') || ''
        };
        const id = formData.get('id');


        if (!productData.name || !productData.price || !productData.product) {
            showNotification('Please fill in all required fields (Name, Price, Category)', 'error');
            return;
        }

        console.log('Updating product:', id, productData);

        try {
            const response = await fetch(`/api/products/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(productData)
            });

            const result = await response.json();
            console.log('Update response:', result);

            if (response.ok) {
                bootstrap.Modal.getInstance(document.getElementById('editProductModal')).hide();
                showNotification('Product updated successfully!', 'success');
                setTimeout(() => loadProducts(currentSort), 1000);
            } else {
                const errorMsg = result.message || (result.errors ? result.errors.join(', ') : 'Error updating product');
                console.error('Server error:', result);
                showNotification(errorMsg, 'error');
            }
        } catch (error) {
            console.error('Error updating:', error);
            showNotification('Error: ' + error.message, 'error');
        }
    });

    // Delete Product Function
    async function deleteProduct(id) {
        if (confirm('Are you sure you want to delete this product?')) {
            try {
                const response = await fetch(`/api/products/${id}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showNotification('Product deleted successfully!', 'success');
                    setTimeout(() => loadProducts(currentSort), 1000);
                } else {
                    showNotification('Error deleting product', 'error');
                }
            } catch (error) {
                showNotification('Error: ' + error.message, 'error');
            }
        }
    }

    // Notification function
    function showNotification(message, type) {
        const toastContainer = document.getElementById('toastContainer') || createToastContainer();
        const toastId = 'toast-' + Date.now();
        
        const toastHtml = `
            <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0" 
                 role="alert" aria-live="assertive" aria-atomic="true" id="${toastId}">
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-triangle'}"></i>
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" 
                            data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        `;
        
        toastContainer.insertAdjacentHTML('beforeend', toastHtml);
        const toastElement = document.getElementById(toastId);
        const toast = new bootstrap.Toast(toastElement);
        toast.show();
        
        // Remove toast after it's hidden
        toastElement.addEventListener('hidden.bs.toast', () => {
            toastElement.remove();
        });
    }

    function createToastContainer() {
        const container = document.createElement('div');
        container.id = 'toastContainer';
        container.className = 'toast-container position-fixed top-0 end-0 p-3';
        container.style.zIndex = '9999';
        document.body.appendChild(container);
        return container;
    }

    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth'
                });
            }
        });
    });

    // Reset forms when modals are closed
    document.getElementById('addProductModal').addEventListener('hidden.bs.modal', function () {
        document.getElementById('addProductForm').reset();
    });

    document.getElementById('editProductModal').addEventListener('hidden.bs.modal', function () {
        document.getElementById('editProductForm').reset();
    });

    // Sort functionality
    async function loadProducts(sort = '') {
        try {
            const url = sort ? `/api/products?sort=${sort}` : '/api/products';
            const response = await fetch(url);
            const result = await response.json();
            
            if (response.ok && result.data) {
                updateProductGrid(result.data);
                updateSortStatus(sort);
                updateSortButtons(sort);
                currentSort = sort;
            } else {
                showNotification('Error loading products', 'error');
            }
        } catch (error) {
            console.error('Error loading products:', error);
            showNotification('Error loading products: ' + error.message, 'error');
        }
    }

    // Sort products by type
    function sortProducts(type) {
        let sortValue = '';
        
        // Toggle sort direction or set initial direction
        if (currentSort === `${type}_asc`) {
            sortValue = `${type}_desc`;
        } else {
            sortValue = `${type}_asc`;
        }
        
        loadProducts(sortValue);
    }

    // Clear sort
    function clearSort() {
        loadProducts('');
    }

    // Update sort button appearance
    function updateSortButtons(sort) {
        // Reset all sort buttons
        document.querySelectorAll('.sort-btn').forEach(btn => {
            btn.classList.remove('btn-primary', 'btn-success');
            btn.classList.add('btn-outline-secondary');
        });

        // Highlight active sort button
        if (sort.includes('price')) {
            const btn = document.getElementById('sortPrice');
            btn.classList.remove('btn-outline-secondary');
            btn.classList.add(sort.includes('_desc') ? 'btn-danger' : 'btn-success');
            
            // Update icon and text based on direction
            const icon = sort.includes('_desc') ? 'bi-sort-numeric-down-alt' : 'bi-sort-numeric-down';
            const text = sort.includes('_desc') ? 'Price: High to Low' : 'Price: Low to High';
            btn.innerHTML = `<i class="bi ${icon}"></i> ${text}`;
        } else if (sort.includes('name')) {
            const btn = document.getElementById('sortName');
            btn.classList.remove('btn-outline-secondary');
            btn.classList.add(sort.includes('_desc') ? 'btn-danger' : 'btn-success');
            
            // Update icon and text based on direction
            const icon = sort.includes('_desc') ? 'bi-sort-alpha-down-alt' : 'bi-sort-alpha-down';
            const text = sort.includes('_desc') ? 'Name: Z to A' : 'Name: A to Z';
            btn.innerHTML = `<i class="bi ${icon}"></i> ${text}`;
        } else if (sort.includes('date')) {
            const btn = document.getElementById('sortDate');
            btn.classList.remove('btn-outline-secondary');
            btn.classList.add(sort.includes('_desc') ? 'btn-danger' : 'btn-success');
            
            // Update icon and text based on direction
            const icon = sort.includes('_desc') ? 'bi-sort-down-alt' : 'bi-sort-down';
            const text = sort.includes('_desc') ? 'Date: Newest First' : 'Date: Oldest First';
            btn.innerHTML = `<i class="bi ${icon}"></i> ${text}`;
        } else {
            // Reset button text when no sort is active
            document.getElementById('sortPrice').innerHTML = '<i class="bi bi-sort-numeric-down"></i> Sort by Price';
            document.getElementById('sortName').innerHTML = '<i class="bi bi-sort-alpha-down"></i> Sort by Name';
            document.getElementById('sortDate').innerHTML = '<i class="bi bi-sort-down"></i> Sort by Date';
        }

        // Show/hide clear button
        const clearBtn = document.getElementById('clearSort');
        if (sort) {
            clearBtn.style.display = 'inline-block';
        } else {
            clearBtn.style.display = 'none';
        }
    }

    function updateProductGrid(products) {
        const container = document.querySelector('#products .row');
        if (!container) return;

        // Clear existing products
        container.innerHTML = '';

        if (products.length === 0) {
            container.innerHTML = `
                <div class="col-12">
                    <div class="text-center py-5">
                        <i class="bi bi-inbox display-1 text-muted"></i>
                        <h3 class="text-muted mt-3">No products found</h3>
                        <p class="text-muted">Start by adding your first product!</p>
                        <button class="btn btn-custom" data-bs-toggle="modal" data-bs-target="#addProductModal">
                            <i class="bi bi-plus-lg"></i> Add Product
                        </button>
                    </div>
                </div>
            `;
        } else {
            products.forEach(product => {
                const productHtml = createProductCard(product);
                container.insertAdjacentHTML('beforeend', productHtml);
            });
        }

        // Update product count
        const countBadge = document.querySelector('#products h2 .badge');
        if (countBadge) {
            countBadge.textContent = products.length;
        }
    }

    function createProductCard(product) {
        const createdDate = product.createdAt ? 
            (typeof product.createdAt === 'string' && product.createdAt.includes('-') ? 
                new Date(product.createdAt).toLocaleDateString() : 
                product.createdAt) : '';

        return `
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card h-100 shadow-sm product-card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-tag"></i> ${product.name}
                        </h5>
                        <small>
                            <i class="bi bi-folder"></i> ${product.product || 'Uncategorized'}
                        </small>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h3 class="text-success mb-0">
                                <i class="bi bi-currency-dollar"></i>${product.price}
                            </h3>
                            <small class="text-muted">ID: ${product.id}</small>
                        </div>
                        ${product.color ? `
                            <div class="mb-2">
                                <span class="badge bg-secondary">
                                    <i class="bi bi-palette"></i> ${product.color}
                                </span>
                            </div>
                        ` : ''}
                        ${product.description ? `
                            <p class="card-text text-muted small">${product.description}</p>
                        ` : ''}
                        ${createdDate ? `
                            <small class="text-muted">
                                <i class="bi bi-calendar"></i> ${createdDate}
                            </small>
                        ` : ''}
                    </div>
                    <div class="card-footer bg-transparent">
                        <div class="btn-group w-100" role="group">
                            <button class="btn btn-outline-primary btn-sm" onclick="editProduct(${product.id})">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                            <button class="btn btn-outline-danger btn-sm" onclick="deleteProduct(${product.id})">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    function updateSortStatus(sort) {
        const statusElement = document.getElementById('sortStatus');
        if (!statusElement) return;

        if (sort) {
            let statusText = 'Sorted: ';
            
            if (sort.includes('price')) {
                statusText += sort.includes('_desc') ? 'Price High to Low' : 'Price Low to High';
            } else if (sort.includes('name')) {
                statusText += sort.includes('_desc') ? 'Name Z to A' : 'Name A to Z';
            } else if (sort.includes('date')) {
                statusText += sort.includes('_desc') ? 'Newest First' : 'Oldest First';
            } else if (sort === 'asc') {
                statusText += 'Oldest First';
            } else if (sort === 'desc') {
                statusText += 'Newest First';
            } else {
                statusText += sort;
            }
            
            statusElement.textContent = statusText;
            statusElement.style.display = 'inline';
        } else {
            statusElement.style.display = 'none';
        }
    }

    // Event listeners for sort dropdown
    document.addEventListener('DOMContentLoaded', function() {
        const sortDropdown = document.querySelectorAll('[data-sort]');
        sortDropdown.forEach(item => {
            item.addEventListener('click', function(e) {
                e.preventDefault();
                const sortValue = this.getAttribute('data-sort');
                loadProducts(sortValue);
            });
        });
    });
</script>
